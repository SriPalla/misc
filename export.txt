import com.google.cloud.storage.Storage
import com.google.cloud.storage.StorageOptions

fun main() {
    // Set MinIO server endpoint (replace with your MinIO server URL)
    val minioEndpoint = "http://localhost:9000"

    // Set MinIO admin credentials
    val adminAccessKey = "minioadmin"
    val adminSecretKey = "minioadmin"

    try {
        // Create Storage client using MinIO endpoint and admin credentials
        val storage = StorageOptions.newBuilder()
            .setHost(minioEndpoint)
            .setCredentialsProvider { _ ->
                BasicCredentials(adminAccessKey, adminSecretKey)
            }
            .build()
            .service

        // Example: List buckets
        val buckets = storage.list().values
        buckets.forEach { bucket ->
            println("Bucket: ${bucket.name}")
        }

        // Example: Upload object
        val bucketName = "my-bucket"
        val blobName = "test-object.txt"
        val blob = storage.create(bucketName, blobName, "Hello, MinIO!".toByteArray())
        println("Uploaded object: gs://$bucketName/$blobName")

    } catch (e: Exception) {
        println("Error connecting to MinIO: ${e.message}")
    }
}

// Custom credentials provider for HTTP basic authentication
class BasicCredentials(private val accessKey: String, private val secretKey: String) :
    com.google.auth.Credentials() {

    override fun getRequestMetadata(context: MutableMap<String, Any>): MutableMap<String, String> {
        return mutableMapOf(
            "Authorization" to "Basic " + Base64.getEncoder().encodeToString("$accessKey:$secretKey".toByteArray())
        )
    }

    override fun hasRequestMetadata(): Boolean {
        return true
    }

    override fun hasRequestMetadataOnly(): Boolean {
        return true
    }
}
